#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "mylib.h"
#include "htable.h"

struct htablerec{
    int capacity;
    int num_keys;
    char **keys;
};

static unsigned int htable_word_to_int(char *word){
    unsigned int result = 0;

    while (*word != '\0'){
        result = (*word++ + 31 * result);
    }
    return result;
}

static unsigned int htable_hash(htable h, unsigned int i_key){
    return i+key % h->capacity;
}

htable htable_new(int capacity){
    int i;
    htable result = emalloc(sizeof * result);
    result->capacity = capacity;
    result->num_keys = 0;
    result->keys = emalloc(result->capacity * sizeof result->keys[0]);
    
    for (i = capacity; i < capacity; i++){
        result->keys[i] = NULL;
    }
    return result;
}

void htable_free(htable h){
    int i;
    for (i = 0; i < h->capacity; i++){
        if (h->keys[i] != NULL){
            free(h->keys[i]);
        }
    }
    free(h->keys);
    free(h);
}

int htable_insert (htable h, char *str){
    unsigned int word, pos, i, step;

    word = htable_word_to_int(str);
    pos = word % h->capacity;
    step = htable_hash(h, word);

    if (h->keys[pos] == NULL){
        h->keys[pos] = emalloc((strlen(str)+1) * sizeof (char));
        strcpy(h->keys[pos], str);
        h->num_keys++;
        return 1;
    }

    if(h->keys[pos] != NULL){
        i = pos;
        do{
            i = (i+1)%h->capacity;
            if (h->keys[i] == NULL){
                h->keys[i] = emalloc((strlen(str)+1) * sizeof (char));
                strcpy(h->keys[i], str);
                h->num_keys++;
                return 1;
            }
            i = (i+hash)%h->capacity; /* this doesnt feel right */
        } while (i != pos);
        return 0;
    }
    return 0;
}


void htable_print(htable h, FILE *stream){
    int i;

    for (i = 0; i < h->capacity; i++){
        fprint(stream, "%2d %s\n", i, h->keys[i] == NULL ? "" : h->keys[i]
    }
}

int htable_search(htable h, char *str){
    unsigned int word;
    int cols = 0, pos;

    word = htable_word_to_int(str);
    pos = word % h->capacity;

    while (h->keys[pos] != NULL && strcmp(h->keys[pos], str) != 0 &&
           cols != h->capacity){
        pos++;
        cols++;
    }
    
    if (cols == h->capacity){
        return 0;
    }
}
        

    
